{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Linear\\\\QuizApp\\\\src\\\\components\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport Container from \"./Container\";\nimport QuestionBox from \"./QuestionBox\";\nimport OptionBox from \"./OptionBox.js\";\nimport \"../styles/Game.css\";\nimport { Button } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport Context from \"../store/pause-context.js\";\nimport { Questions, Choices } from \"./DummyData.js\";\nimport InGameMessage from \"./InGameMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  // get all choices, questions, worth.\n  const [choices, setChoices] = useState(Choices);\n  const [questions, setQuestions] = useState(Questions);\n  const [gameIndex, setgameIndex] = useState(0);\n  const [prevID, setPrevID] = useState(1);\n  const [gameLost, setGameLost] = useState(false);\n  const [freezed, setFreezed] = useState(false);\n  const [choiceItems, setChoiceItems] = useState([]);\n  const [question, setQuestion] = useState(null);\n  const [rightAnswer, setRightAnswer] = useState(false);\n  const [correctChoice, setCorrectChoice] = useState({\n    pos: 0,\n    val: \"null\",\n    trivia: \"null\",\n    hint: \"null\"\n  });\n  const [TL, setTL] = useState(1000);\n  const [gameQuit, setGameQuit] = useState(false);\n  useEffect(() => {\n    console.log(gameIndex);\n\n    if (gameIndex > 0 && gameIndex <= questions.length) {\n      const question_items = questions.filter(question => {\n        return question.index === gameIndex - 1;\n      });\n      const question = question_items[0];\n      const choice_items = choices.filter(choice => choice.question === gameIndex - 1);\n      choices.forEach(choice => {\n        console.log(choice);\n      });\n      const sahiJawab = choice_items.find(c => c.is_correct) || {};\n      const obj = {\n        pos: 0,\n        val: \"null\",\n        trivia: \"null\"\n      };\n      obj.pos = sahiJawab.position;\n      obj.val = sahiJawab.choice;\n      obj.trivia = question.trivia;\n      setCorrectChoice(obj);\n      setQuestion(question);\n      setChoiceItems(choice_items);\n      console.log(choice_items);\n      let x = 60 / 130;\n      var arr = question.title.split(\" \");\n      let n = arr.length;\n      let y = n * x * 1000; // console.log(n);\n\n      setTL(y);\n    }\n  }, [gameIndex, questions, choices]); // prop function.\n\n  function timeUpCheck(s) {\n    if (s === 0) {\n      setGameLost(true);\n    }\n  } // prop function.\n\n\n  const getResult = (isCorrect, quit) => {\n    if (quit) {\n      setGameQuit(true);\n    } else if (isCorrect) {\n      // console.log(\" func get result says absolutely true\");\n      setgameIndex(gameIndex + 1);\n      console.log(gameIndex);\n    } else {\n      setGameLost(true);\n    }\n  };\n\n  const alphabet = id => {\n    if (id === 1) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" A. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 14\n      }, this);\n    } else if (id === 2) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" B. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }, this);\n    } else if (id === 3) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" C. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" D. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this);\n  };\n\n  const putNextQuestion = () => {\n    console.log(question.trivia);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pauseScreen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: \"white\"\n        },\n        onClick: () => setRightAnswer(true),\n        children: [\"Right answer!\", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" Trivia \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"  \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"lightgreen\"\n            },\n            children: [\" \", questions[gameIndex > 0 ? gameIndex - 1 : 0].trivia, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          children: \" Next \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  };\n\n  const gameLostMessage = () => {\n    return /*#__PURE__*/_jsxDEV(InGameMessage, {\n      resultMessage: \"Wrong! The correct answer is.\",\n      correctChoicePosition: alphabet(correctChoice.pos),\n      correctChoiceValue: correctChoice.val,\n      answerInfo: questions[gameIndex > 0 ? gameIndex - 1 : 0].trivia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  };\n\n  const gameWonMessage = () => {\n    return /*#__PURE__*/_jsxDEV(InGameMessage, {\n      resultMessage: \"Congratulations!! All answers are correct.\",\n      correctChoicePosition: alphabet(correctChoice.pos),\n      correctChoiceValue: correctChoice.val,\n      answerInfo: questions[questions.length - 1].trivia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }, this);\n  };\n\n  const gameQuitMessage = () => {\n    console.log(correctChoice);\n    return /*#__PURE__*/_jsxDEV(InGameMessage, {\n      resultMessage: \"Thanks for playing. The correct answer is: \",\n      correctChoicePosition: alphabet(correctChoice.pos),\n      correctChoiceValue: correctChoice.val,\n      answerInfo: questions[gameIndex > 0 ? gameIndex - 1 : 0].trivia\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  };\n\n  const resetStates = () => {\n    if (rightAnswer) {\n      setRightAnswer(false);\n      setPrevID(gameIndex);\n      setFreezed(false);\n    }\n  };\n\n  const continueGame = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [prevID < gameIndex && gameIndex <= questions.length ? putNextQuestion() : null, resetStates(), prevID === gameIndex && prevID >= 1 ? boxHolder() : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  };\n\n  const boxHolder = () => {\n    if (question !== null) {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Context.Provider, {\n          value: {\n            freezed,\n            setFreezed\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(QuestionBox, {\n              gameIndex: gameIndex,\n              setgameIndex: setgameIndex,\n              question: question,\n              timeUpCheck: timeUpCheck,\n              TL: TL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(OptionBox, {\n              choice_items: choiceItems,\n              gameIndex: gameIndex,\n              setgameIndex: setgameIndex,\n              getResult: getResult,\n              TL: TL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [gameIndex === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pauseScreen\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            margin: \"0 auto\"\n          },\n          color: \"secondary\",\n          onClick: () => setgameIndex(gameIndex + 1),\n          children: \"Click To Begin!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this) : gameIndex > questions.length ? gameWonMessage() : null, gameLost ? gameLostMessage() : gameQuit ? gameQuitMessage() : continueGame()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"9aDggAgoYa0o7STsY88KLwX7g8Y=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["D:/Projects/Linear/QuizApp/src/components/Game.js"],"names":["React","useState","useEffect","createContext","useContext","Container","QuestionBox","OptionBox","Button","Link","Context","Questions","Choices","InGameMessage","Game","choices","setChoices","questions","setQuestions","gameIndex","setgameIndex","prevID","setPrevID","gameLost","setGameLost","freezed","setFreezed","choiceItems","setChoiceItems","question","setQuestion","rightAnswer","setRightAnswer","correctChoice","setCorrectChoice","pos","val","trivia","hint","TL","setTL","gameQuit","setGameQuit","console","log","length","question_items","filter","index","choice_items","choice","forEach","sahiJawab","find","c","is_correct","obj","position","x","arr","title","split","n","y","timeUpCheck","s","getResult","isCorrect","quit","alphabet","id","putNextQuestion","color","gameLostMessage","gameWonMessage","gameQuitMessage","resetStates","continueGame","boxHolder","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\r\nimport Container from \"./Container\";\r\nimport QuestionBox from \"./QuestionBox\";\r\nimport OptionBox from \"./OptionBox.js\";\r\nimport \"../styles/Game.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Context from \"../store/pause-context.js\";\r\nimport {Questions, Choices} from \"./DummyData.js\";\r\nimport InGameMessage from \"./InGameMessage\";\r\n\r\nexport default function Game() {\r\n  // get all choices, questions, worth.\r\n\r\n  const [choices, setChoices] = useState(Choices);\r\n  const [questions, setQuestions] = useState(Questions);\r\n\r\n  const [gameIndex, setgameIndex] = useState(0);\r\n  const [prevID, setPrevID] = useState(1);\r\n  const [gameLost, setGameLost] = useState(false);\r\n  const [freezed, setFreezed] = useState(false);\r\n  const [choiceItems, setChoiceItems] = useState([]);\r\n  const [question, setQuestion] = useState(null);\r\n  const [rightAnswer, setRightAnswer] = useState(false);\r\n  const [correctChoice, setCorrectChoice] = useState({\r\n    pos: 0,\r\n    val: \"null\",\r\n    trivia: \"null\",\r\n    hint: \"null\",\r\n  });\r\n  const [TL, setTL] = useState(1000);\r\n\r\n  const [gameQuit, setGameQuit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(gameIndex);\r\n\r\n    if (gameIndex > 0 && gameIndex <= questions.length) {\r\n      const question_items = questions.filter((question) => {\r\n        return question.index === gameIndex - 1;\r\n      });\r\n\r\n      const question = question_items[0];\r\n\r\n      const choice_items = choices.filter(\r\n        (choice) => choice.question === gameIndex - 1\r\n      );\r\n\r\n      choices.forEach((choice) => {\r\n        console.log(choice);\r\n      });\r\n\r\n      const sahiJawab = choice_items.find((c) => c.is_correct) || {};\r\n      const obj = { pos: 0, val: \"null\", trivia: \"null\" };\r\n      obj.pos = sahiJawab.position;\r\n      obj.val = sahiJawab.choice;\r\n      obj.trivia = question.trivia;\r\n\r\n      setCorrectChoice(obj);\r\n      setQuestion(question);\r\n      setChoiceItems(choice_items);\r\n      console.log(choice_items);\r\n\r\n      let x = 60 / 130;\r\n      var arr = question.title.split(\" \");\r\n      let n = arr.length;\r\n      let y = n * x * 1000;\r\n      // console.log(n);\r\n      setTL(y);\r\n    }\r\n  }, [gameIndex, questions, choices]);\r\n\r\n  // prop function.\r\n  function timeUpCheck(s) {\r\n    if (s === 0) {\r\n      setGameLost(true);\r\n    }\r\n  }\r\n  // prop function.\r\n  const getResult = (isCorrect, quit) => {\r\n    if (quit) {\r\n      setGameQuit(true);\r\n    } else if (isCorrect) {\r\n      // console.log(\" func get result says absolutely true\");\r\n      setgameIndex(gameIndex + 1);\r\n      console.log(gameIndex);\r\n    } else {\r\n      setGameLost(true);\r\n    }\r\n  }\r\n\r\n  const alphabet = (id) => {\r\n    if (id === 1) {\r\n      return <span> A. </span>;\r\n    } else if (id === 2) {\r\n      return <span> B. </span>;\r\n    } else if (id === 3) {\r\n      return <span> C. </span>;\r\n    }\r\n    return <span> D. </span>;\r\n  };\r\n\r\n  const putNextQuestion = () => {\r\n    console.log(question.trivia);\r\n    return (\r\n      <div className=\"pauseScreen\">\r\n        <h3 style={{ color: \"white\" }} onClick={() => setRightAnswer(true)}>\r\n          Right answer!\r\n          <h2> Trivia </h2>\r\n         <p>  <span style={{ color: \"lightgreen\" }}> {questions[(gameIndex > 0) ? gameIndex - 1 : 0].trivia} </span> </p>\r\n          <Button color=\"secondary\"> Next </Button>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const gameLostMessage = () => {\r\n\r\n    return (\r\n      <InGameMessage \r\n      resultMessage = \"Wrong! The correct answer is.\"\r\n      correctChoicePosition = {alphabet(correctChoice.pos)}\r\n      correctChoiceValue = {correctChoice.val}\r\n      answerInfo = {questions[(gameIndex > 0) ? gameIndex - 1 : 0].trivia}\r\n      />\r\n    );\r\n  };\r\n\r\n  const gameWonMessage = () => {\r\n\r\n    return (\r\n          <InGameMessage \r\n          resultMessage = \"Congratulations!! All answers are correct.\"\r\n          correctChoicePosition = {alphabet(correctChoice.pos)}\r\n          correctChoiceValue = {correctChoice.val}\r\n          answerInfo = {questions[questions.length - 1].trivia}\r\n          />\r\n    );\r\n  };\r\n\r\n  const gameQuitMessage = () => {\r\n\r\n    console.log(correctChoice);\r\n    return (\r\n      <InGameMessage \r\n      resultMessage = \"Thanks for playing. The correct answer is: \"\r\n      correctChoicePosition = {alphabet(correctChoice.pos)}\r\n      correctChoiceValue = {correctChoice.val}\r\n      answerInfo = {questions[(gameIndex > 0) ? gameIndex - 1 : 0].trivia}\r\n      />\r\n    );\r\n  };\r\n\r\n  const resetStates = () => {\r\n    if (rightAnswer) {\r\n      setRightAnswer(false);\r\n      setPrevID(gameIndex);\r\n      setFreezed(false);\r\n    }\r\n  };\r\n\r\n  const continueGame = () => {\r\n    return (\r\n      <div>\r\n        {prevID < gameIndex && gameIndex <= questions.length\r\n          ? putNextQuestion()\r\n          : null}\r\n        {resetStates()}\r\n        {prevID === gameIndex && prevID >= 1 ? boxHolder() : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const boxHolder = () => {\r\n    if (question !== null) {\r\n      return (\r\n        <Container>\r\n          {/* <button onClick={showHint}> Show Hint </button> */}\r\n          <Context.Provider value={{ freezed, setFreezed }}>\r\n           \r\n                <div id=\"wrapper\">\r\n                  <QuestionBox\r\n                    gameIndex={gameIndex}\r\n                    setgameIndex={setgameIndex}\r\n                    question={question}\r\n                    timeUpCheck={timeUpCheck}\r\n                    TL={TL}\r\n                  />\r\n\r\n                  <OptionBox\r\n                    choice_items={choiceItems}\r\n                    gameIndex={gameIndex}\r\n                    setgameIndex={setgameIndex}\r\n                    getResult={getResult}\r\n                    TL={TL}\r\n                  />\r\n                  \r\n              </div>\r\n            \r\n          </Context.Provider>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      {/* ready button */}\r\n      <div className=\"container\">\r\n        {gameIndex === 0 ? (\r\n          <div className=\"pauseScreen\">\r\n            <Button\r\n              style={{ margin: \"0 auto\" }}\r\n              color=\"secondary\"\r\n              onClick={() => setgameIndex(gameIndex + 1)}\r\n            >\r\n              Click To Begin!!!\r\n            </Button>\r\n          </div>\r\n        ) : gameIndex > questions.length ? (\r\n          gameWonMessage()\r\n        ) : null}\r\n\r\n        {gameLost\r\n          ? gameLostMessage()\r\n          : gameQuit\r\n          ? gameQuitMessage()\r\n          : continueGame()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}