{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\anime-quiz\\\\frontface\\\\src\\\\components\\\\OptionBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport OptionHandler from './OptionHandler.js';\nimport { Button } from \"@material-ui/core\";\nimport Context from '../store/pause-context.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OptionBox(props) {\n  _s();\n\n  const {\n    timerPaused,\n    setTimerPaused\n  } = useContext(Context);\n  const {\n    choice_items,\n    worthID,\n    setWorthID,\n    setRightAnswer,\n    gameLost,\n    setPause\n  } = props;\n  const [disableFreeze, setDisableFreeze] = useState(true);\n  const [showCAB, setShowCAB] = useState(false);\n  const [cabClicked, setCABClicked] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false); //   const [buttonProps, setButtonProps] = [{}, {}, {}, {}]\n\n  function optionHandler(clicked) {\n    setDisableFreeze(!clicked);\n    console.log(\"disabled-\");\n  }\n\n  function freezeOptions() {\n    // also stop the timer.\n    setShowCAB(!showCAB); // setTimerPaused(true);\n\n    console.log(\"worthId after freezing-\");\n    console.log(worthID);\n  }\n\n  function checkAnswer() {\n    //  console.log(\"checking answer.\"); \n    setCABClicked(!cabClicked);\n\n    if (!isCorrect) {\n      props.getResult(false); // setRightAnswer(false);\n    } else {\n      setShowCAB(!showCAB);\n      props.getResult(true); //  setRightAnswer(true);\n    }\n  }\n\n  function displayButtons() {\n    let mat = [[]],\n        arr = [];\n    choice_items.map(option => {\n      arr.push(option);\n    });\n    mat = [[arr[0], arr[1]], [arr[2], arr[3]]];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: mat.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-row\",\n        children: row.map(option => {\n          return /*#__PURE__*/_jsxDEV(OptionHandler, {\n            option: option,\n            id: option.position,\n            onOptionClick: optionHandler,\n            disableOption: showCAB,\n            cabClicked: cabClicked,\n            setChosen: setIsCorrect,\n            worthID: worthID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this);\n        })\n      }, \"1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"inner2\",\n    children: [displayButtons(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        backgroundColor: \"white\"\n      },\n      children: showCAB ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: checkAnswer,\n        children: \" Check Answer \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        disabled: disableFreeze,\n        onClick: freezeOptions,\n        color: \"primary\",\n        children: \"Freeze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OptionBox, \"m+d5FcMqNF4zLULzBN57vhLqWUw=\");\n\n_c = OptionBox;\nexport default OptionBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptionBox\");","map":{"version":3,"sources":["D:/Projects/anime-quiz/frontface/src/components/OptionBox.js"],"names":["React","useState","useContext","OptionHandler","Button","Context","OptionBox","props","timerPaused","setTimerPaused","choice_items","worthID","setWorthID","setRightAnswer","gameLost","setPause","disableFreeze","setDisableFreeze","showCAB","setShowCAB","cabClicked","setCABClicked","isCorrect","setIsCorrect","optionHandler","clicked","console","log","freezeOptions","checkAnswer","getResult","displayButtons","mat","arr","map","option","push","row","position","textAlign","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAAQC,MAAR,QAAqB,mBAArB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAExB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCP,UAAU,CAACG,OAAD,CAAlD;AACA,QAAM;AAACK,IAAAA,YAAD;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,UAAxB;AAAoCC,IAAAA,cAApC;AAAoDC,IAAAA,QAApD;AAA8DC,IAAAA;AAA9D,MAA0ER,KAAhF;AAEA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C,CARwB,CAU1B;;AAEE,WAASuB,aAAT,CAAuBC,OAAvB,EAAgC;AAC9BR,IAAAA,gBAAgB,CAAC,CAACQ,OAAF,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACF;;AAED,WAASC,aAAT,GAAyB;AACzB;AACGT,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV,CAFsB,CAGtB;;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ;AACF;;AAED,WAASkB,WAAT,GAAuB;AACpB;AACCR,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;;AAEA,QAAG,CAACE,SAAJ,EAAe;AAEZf,MAAAA,KAAK,CAACuB,SAAN,CAAgB,KAAhB,EAFY,CAGZ;AACF,KAJD,MAKK;AACHX,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAX,MAAAA,KAAK,CAACuB,SAAN,CAAgB,IAAhB,EAFG,CAGJ;AAEA;AAEJ;;AAED,WAASC,cAAT,GAA0B;AAEzB,QAAIC,GAAG,GAAG,CAAC,EAAD,CAAV;AAAA,QAAgBC,GAAG,GAAG,EAAtB;AACAvB,IAAAA,YAAY,CAACwB,GAAb,CAAkBC,MAAD,IAAY;AACzBF,MAAAA,GAAG,CAACG,IAAJ,CAASD,MAAT;AACH,KAFD;AAIAH,IAAAA,GAAG,GAAG,CAAE,CAACC,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAAF,EAAoB,CAACA,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,CAAD,CAAZ,CAApB,CAAN;AAEC,wBACG;AAAA,gBAGED,GAAG,CAACE,GAAJ,CAAQG,GAAG,iBACT;AAAa,QAAA,SAAS,EAAC,YAAvB;AAAA,kBACIA,GAAG,CAACH,GAAJ,CAAQC,MAAM,IAAI;AAChB,8BACE,QAAC,aAAD;AACA,YAAA,MAAM,EAAEA,MADR;AAEA,YAAA,EAAE,EAAEA,MAAM,CAACG,QAFX;AAGA,YAAA,aAAa,EAAId,aAHjB;AAIA,YAAA,aAAa,EAAIN,OAJjB;AAKA,YAAA,UAAU,EAAIE,UALd;AAMA,YAAA,SAAS,EAAIG,YANb;AAOA,YAAA,OAAO,EAAIZ;AAPX;AAAA;AAAA;AAAA;AAAA,kBADF;AAUD,SAXD;AADJ,SAAS,GAAT;AAAA;AAAA;AAAA;AAAA,cADF;AAHF;AAAA;AAAA;AAAA;AAAA,YADH;AAyBD;;AAGE,sBACI;AAAK,IAAA,EAAE,EAAC,QAAR;AAAA,eAGKoB,cAAc,EAHnB,eAME;AAAK,MAAA,KAAK,EAAE;AAAEQ,QAAAA,SAAS,EAAE,QAAb;AAAuBC,QAAAA,eAAe,EAAE;AAAxC,OAAZ;AAAA,gBAEGtB,OAAO,gBAAG,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEW,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBACR,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEb,aAAlB;AAAiC,QAAA,OAAO,EAAEY,aAA1C;AAAyD,QAAA,KAAK,EAAC,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GAlGQtB,S;;KAAAA,S;AAoGT,eAAeA,SAAf","sourcesContent":["import React, {useState, useContext} from 'react'\r\nimport OptionHandler from './OptionHandler.js';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport Context from '../store/pause-context.js';\r\n\r\nfunction OptionBox(props) {\r\n\r\n  const { timerPaused, setTimerPaused } = useContext(Context);\r\n  const {choice_items, worthID, setWorthID, setRightAnswer, gameLost, setPause} = props;\r\n\r\n  const [disableFreeze, setDisableFreeze] = useState(true);\r\n  const [showCAB, setShowCAB] = useState(false);\r\n  const [cabClicked, setCABClicked] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n\r\n//   const [buttonProps, setButtonProps] = [{}, {}, {}, {}]\r\n\r\n  function optionHandler(clicked) {\r\n    setDisableFreeze(!clicked);\r\n    console.log(\"disabled-\");\r\n }\r\n \r\n function freezeOptions() {\r\n // also stop the timer.\r\n    setShowCAB(!showCAB);\r\n    // setTimerPaused(true);\r\n    console.log(\"worthId after freezing-\");\r\n    console.log(worthID);\r\n }\r\n\r\n function checkAnswer() {\r\n    //  console.log(\"checking answer.\"); \r\n     setCABClicked(!cabClicked);\r\n\r\n     if(!isCorrect) {\r\n\r\n        props.getResult(false);\r\n        // setRightAnswer(false);\r\n     }\r\n     else {\r\n       setShowCAB(!showCAB);\r\n       props.getResult(true);\r\n      //  setRightAnswer(true);\r\n \r\n     }\r\n\r\n }\r\n\r\n function displayButtons() {\r\n\r\n  let mat = [[]], arr = [];\r\n  choice_items.map((option) => {\r\n      arr.push(option);\r\n  })\r\n\r\n  mat = [ [arr[0], arr[1]], [arr[2], arr[3]] ];\r\n      \r\n   return (\r\n      <div>        \r\n         {\r\n\r\n        mat.map(row => ( \r\n          <div key=\"1\" className=\"option-row\">\r\n            { row.map(option => {\r\n                return (\r\n                  <OptionHandler \r\n                  option={option} \r\n                  id={option.position} \r\n                  onOptionClick = {optionHandler}\r\n                  disableOption = {showCAB}\r\n                  cabClicked = {cabClicked}\r\n                  setChosen = {setIsCorrect}\r\n                  worthID = {worthID}\r\n                  /> )\r\n              } ) \r\n            }\r\n            </div>\r\n          ))\r\n\r\n         } \r\n     </div>\r\n   )\r\n }\r\n\r\n\r\n    return (\r\n        <div id=\"inner2\">\r\n          \r\n\r\n            {displayButtons()}\r\n  \r\n    \r\n          <div style={{ textAlign: \"center\", backgroundColor: \"white\" }}>\r\n          \r\n            {showCAB ? <Button onClick={checkAnswer}> Check Answer </Button>: \r\n            <Button disabled={disableFreeze} onClick={freezeOptions} color=\"primary\">\r\n              Freeze\r\n            </Button>}\r\n \r\n          </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptionBox\r\n"]},"metadata":{},"sourceType":"module"}