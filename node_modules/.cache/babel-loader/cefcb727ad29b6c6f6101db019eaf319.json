{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\anime-quiz\\\\frontface\\\\src\\\\components\\\\QuestionBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Grid, Typography, Button, ButtonGroup } from \"@material-ui/core\";\nimport \"../styles/QuestionBox.css\";\nimport \"../styles/OptionBox.css\";\nimport OptionHandler from \"./OptionHandler.js\";\nimport Context from '../store/pause-context.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QuestionBox(props) {\n  _s();\n\n  const {\n    timerPaused,\n    setTimerPaused\n  } = useContext(Context);\n  const {\n    worthID,\n    setWorthID,\n    questions,\n    choices\n  } = props;\n  const [question, setQuestion] = useState({});\n  const [choiceItems, setChoiceItems] = useState([]);\n  const [animation, setAnimation] = useState(null);\n  const [seconds, setSeconds] = useState(45);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!timerPaused) {\n        //I used '!paused' because I set pause initially to false. \n        if (seconds > 0) {\n          setSeconds(seconds - 1);\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n  useEffect(() => {\n    console.log(\"boxHolder rendering\");\n    const question_items = questions.filter(question => {\n      return question.worth === worthID;\n    });\n    const question = question_items[Math.floor(Math.random() * question_items.length)];\n    console.log(question);\n    const choice_items = choices.filter(choice => choice.question === question.id);\n    choice_items.map(choice => {\n      if (choice.is_correct) {// let obj = {id:choice.choice, ans:choice.position};\n        // setActualAns(obj);\n      }\n    });\n    console.log(choice_items);\n    setQuestion(question);\n    setChoiceItems(choice_items);\n    console.log(questions);\n  }, [worthID]);\n\n  const getResultTemp = isCorrect => {\n    props.getResult(isCorrect);\n  };\n\n  function startGame() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          animation: animation !== null ? animation : \"\"\n        },\n        className: \"time\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", seconds, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typeRacer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordOutput\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" Q \", worthID, \". \", question.title, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OptionBox, {\n        choice_items: choiceItems // setRightAnswer = {setRightAnswer}\n        ,\n        worthID: worthID,\n        setWorthID: setWorthID,\n        getResultTemp: getResultTemp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"inner1\",\n    children: startGame()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionBox, \"s4nUEJbQKwHK8Pf+BR3OPwdw3RU=\");\n\n_c = QuestionBox;\nexport default QuestionBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionBox\");","map":{"version":3,"sources":["D:/Projects/anime-quiz/frontface/src/components/QuestionBox.js"],"names":["React","useState","useEffect","useContext","Grid","Typography","Button","ButtonGroup","OptionHandler","Context","QuestionBox","props","timerPaused","setTimerPaused","worthID","setWorthID","questions","choices","question","setQuestion","choiceItems","setChoiceItems","animation","setAnimation","seconds","setSeconds","interval","setInterval","clearInterval","console","log","question_items","filter","worth","Math","floor","random","length","choice_items","choice","id","map","is_correct","getResultTemp","isCorrect","getResult","startGame","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Grid, Typography, Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\nimport \"../styles/QuestionBox.css\";\r\nimport \"../styles/OptionBox.css\";\r\nimport OptionHandler from \"./OptionHandler.js\";\r\nimport Context from '../store/pause-context.js';\r\n\r\nfunction QuestionBox(props) {\r\n  const { timerPaused, setTimerPaused } = useContext(Context);\r\n\r\n  const {worthID, setWorthID, questions, choices} = props;\r\n\r\n  const [question, setQuestion] = useState({});\r\n  const [choiceItems, setChoiceItems] = useState([]);\r\n  const [animation, setAnimation] = useState(null);\r\n  const [seconds, setSeconds] = useState(45);\r\n  \r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if(!timerPaused) { //I used '!paused' because I set pause initially to false. \r\n        if (seconds > 0) {\r\n          setSeconds(seconds - 1);\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"boxHolder rendering\");\r\n    const question_items = questions.filter((question) => {\r\n      return question.worth === worthID;\r\n    });\r\n    const question = question_items[Math.floor(Math.random() * question_items.length)];\r\n\r\n    console.log(question);\r\n    const choice_items = choices.filter( \r\n      (choice) => choice.question === question.id\r\n    );\r\n    choice_items.map((choice) => {\r\n      if(choice.is_correct) {\r\n        // let obj = {id:choice.choice, ans:choice.position};\r\n        // setActualAns(obj);\r\n      }\r\n    })\r\n    console.log(choice_items);\r\n\r\n    setQuestion(question);\r\n    setChoiceItems(choice_items);\r\n\r\n    console.log(questions);\r\n\r\n  }, [worthID]);\r\n\r\n  const getResultTemp = (isCorrect) => {\r\n    props.getResult(isCorrect);\r\n  }\r\n\r\n  function startGame() {\r\n\r\n    return (\r\n      <div className=\"\">\r\n   \r\n          <div style = {{animation : (animation !== null ? animation : \"\")}} className=\"time\">\r\n            <p> {seconds} </p>\r\n          </div>\r\n  \r\n\r\n        <div className=\"typeRacer\">\r\n          <div className=\"wordOutput\">\r\n            <p> Q {worthID}. {question.title} </p>\r\n        \r\n          </div>\r\n\r\n          {/* <div className=\"button-space\">\r\n            <button className=\"option\"> Option </button>\r\n          </div> */}\r\n\r\n          {/* set timeout of 7s. */}\r\n        </div>\r\n\r\n         <OptionBox choice_items={choiceItems} \r\n          // setRightAnswer = {setRightAnswer}\r\n          worthID = {worthID} \r\n          setWorthID={setWorthID}\r\n          getResultTemp = {getResultTemp}\r\n          />\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div id=\"inner1\">\r\n          {startGame()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionBox;\r\n\r\n"]},"metadata":{},"sourceType":"module"}