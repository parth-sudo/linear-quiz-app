{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\anime-quiz\\\\frontface\\\\src\\\\components\\\\OptionHandler.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/OptionBox.css';\nimport { Grid, Typography, Button, ButtonGroup } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OptionHandler(props) {\n  _s();\n\n  const {\n    option,\n    id,\n    disableOption,\n    setChosen,\n    worthID,\n    cabClicked\n  } = props;\n  const [clicked, setClicked] = useState(true);\n  const [bgcolor, setBgcolor] = useState('black');\n  const [textcolor, setTextcolor] = useState('white');\n  const [prevWorthID, setPrevWorthID] = useState(0);\n  const [back, setBack] = useState('black');\n\n  function handleOptionClick() {\n    setClicked(!clicked);\n\n    if (clicked) {\n      setChosen(option.is_correct);\n      setBgcolor('yellow');\n      setTextcolor('black');\n    } else {\n      if (disableOption === false) {\n        setChosen(false);\n        setBgcolor('black');\n        setTextcolor('white');\n      }\n    } // console.log(clicked);\n\n\n    props.onOptionClick(clicked);\n  }\n\n  function resetOptions() {\n    if (worthID > prevWorthID) {\n      setBgcolor('black');\n      setTextcolor('white');\n      setClicked(true);\n      setPrevWorthID(worthID);\n    }\n  } //   const foo = () => {\n  //       if(cabClicked) {\n  //           if(option.is_correct) {\n  //             setBack('green');\n  //           }\n  //       }\n  //       else {\n  //           setBack(bgcolor);\n  //       }\n  //   }\n\n\n  let style = {\n    backgroundColor: bgcolor,\n    color: textcolor\n  };\n\n  const alphabet = () => {\n    if (id === 1) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" A \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 18\n      }, this);\n    } else if (id === 2) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" B \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }, this);\n    } else if (id === 3) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" C \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" D \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 14\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: disableOption && bgcolor !== 'yellow',\n      onClick: handleOptionClick,\n      style: style,\n      className: `option${id}`,\n      children: [\" \", alphabet(), \". \", option.choice, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), resetOptions()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OptionHandler, \"nTga6nPIc3qwy5TLRWS55nZLirQ=\");\n\n_c = OptionHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptionHandler\");","map":{"version":3,"sources":["D:/Projects/anime-quiz/frontface/src/components/OptionHandler.js"],"names":["React","useState","useEffect","Grid","Typography","Button","ButtonGroup","OptionHandler","props","option","id","disableOption","setChosen","worthID","cabClicked","clicked","setClicked","bgcolor","setBgcolor","textcolor","setTextcolor","prevWorthID","setPrevWorthID","back","setBack","handleOptionClick","is_correct","onOptionClick","resetOptions","style","backgroundColor","color","alphabet","choice"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport '../styles/OptionBox.css';\r\nimport { Grid, Typography, Button, ButtonGroup } from \"@material-ui/core\";\r\n\r\nexport default function OptionHandler(props) {\r\n    const {option, id, disableOption, setChosen, worthID, cabClicked} = props;\r\n   \r\n    const [clicked, setClicked] = useState(true);\r\n    const [bgcolor, setBgcolor] = useState('black');\r\n    const [textcolor, setTextcolor] = useState('white');\r\n    const [prevWorthID, setPrevWorthID] = useState(0);\r\n    const [back, setBack] = useState('black');\r\n\r\n\r\n  function handleOptionClick() {\r\n\r\n      setClicked(!clicked);\r\n      if(clicked) {\r\n          setChosen(option.is_correct);\r\n          setBgcolor('yellow');\r\n          setTextcolor('black');\r\n      }\r\n      else {\r\n          if(disableOption === false) {\r\n            setChosen(false);\r\n            setBgcolor('black');\r\n            setTextcolor('white');\r\n          }\r\n\r\n      }\r\n    // console.log(clicked);\r\n\r\n      props.onOptionClick(clicked);\r\n \r\n  }\r\n\r\n  function resetOptions() {\r\n      if(worthID > prevWorthID) {\r\n          setBgcolor('black');\r\n          setTextcolor('white');\r\n          setClicked(true);\r\n          setPrevWorthID(worthID);\r\n      }\r\n  }\r\n\r\n//   const foo = () => {\r\n//       if(cabClicked) {\r\n//           if(option.is_correct) {\r\n//             setBack('green');\r\n//           }\r\n//       }\r\n//       else {\r\n//           setBack(bgcolor);\r\n//       }\r\n//   }\r\n  let style = {backgroundColor : bgcolor, color : textcolor};\r\n\r\n  const alphabet = () => {\r\n      if(id === 1) {\r\n          return <span> A </span>;\r\n      }\r\n      else if(id === 2) {\r\n        return <p> B </p>;\r\n      }\r\n      else if(id === 3) {\r\n        return <p> C </p>;\r\n      }\r\n      return <p> D </p>;\r\n  }\r\n\r\n    return (\r\n        <div>\r\n    \r\n            <button disabled={disableOption && bgcolor!=='yellow'} onClick={handleOptionClick}\r\n            style={style} \r\n            className={`option${id}`}> {alphabet()}. {option.choice} </button>\r\n            {resetOptions()}\r\n\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}